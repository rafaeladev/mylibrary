// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // url      = env("DATABASE_URL")
  url      = "file:./dev.db"
}

model Account {
  id                Int     @id @default(autoincrement())
  userId            Int
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           Int      @id @default(autoincrement())
  sessionToken String   @unique
  userId       Int
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  Book          Book[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Book {
  id          Int            @id @default(autoincrement())
  title       String
  description String?
  image       String?
  link        String?
  favorite    Boolean?
  status      Boolean
  user        User?          @relation(fields: [userId], references: [id])
  userId      Int?
  type        Type           @relation(fields: [typeId], references: [id], onDelete: Cascade)
  typeId      Int
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  categoryId  Int
  authors     Author_Books[]
}

model Author {
  id    Int            @id @default(autoincrement())
  name  String
  books Author_Books[]
}

model Author_Books {
  authorId Int
  author   Author @relation(fields: [authorId], references: [id], onDelete: Cascade)
  bookId   Int
  book     Book   @relation(fields: [bookId], references: [id], onDelete: Cascade)

  @@id([bookId, authorId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  Book Book[]
}

model Type {
  id   Int    @id @default(autoincrement())
  name String
  Book Book[]
}
